services:
  gitea:
    image: gitea/gitea:latest
    container_name: gitea
    ports:
      - "3000:3000"
      - "222:22"
    volumes:
      - gitea_data:/data
      - ./gitea_config/app.ini:/data/gitea/conf/app.ini # Mount your custom app.ini
    networks:
      - app_net
    restart: unless-stopped

  jenkins:
    image: jenkins/jenkins:lts
    container_name: jenkins
    ports:
      - "8080:8080"
    volumes:
      - jenkins_data:/var/jenkins_home
    depends_on:
      - gitea
      - sonarqube
    networks:
      - app_net
    restart: unless-stopped

  sonarqube:
    image: sonarqube:latest
    container_name: sonarqube
    ports:
      - "9000:9000"
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs
    networks:
      - app_net
    restart: unless-stopped

  # PostgreSQL for SonarQube metrics storage
  postgres:
    image: postgres:15-alpine
    container_name: postgres-metrics
    environment:
      POSTGRES_DB: sonarqube_metrics
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sonarqube-database/postgres/init-scripts:/docker-entrypoint-initdb.d
    networks:
      - app_net
    restart: unless-stopped

  # PostgreSQL for Airflow metadata
  postgres-airflow:
    image: postgres:15-alpine
    container_name: postgres-airflow
    environment:
      POSTGRES_DB: airflow
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
    ports:
      - "5433:5432"
    volumes:
      - postgres_airflow_data:/var/lib/postgresql/data
    networks:
      - app_net
    restart: unless-stopped

  # Redis for Airflow (optional, for CeleryExecutor)
  redis:
    image: redis:7-alpine
    container_name: redis
    networks:
      - app_net
    restart: unless-stopped

  # Airflow webserver
  airflow-webserver:
    build: ./sonarqube-etl
    container_name: airflow-webserver
    hostname: airflow-webserver
    depends_on:
      - postgres-airflow
      - redis
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres-airflow:5432/airflow
      AIRFLOW__CORE__FERNET_KEY: ''
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
      AIRFLOW__WEBSERVER__EXPOSE_CONFIG: 'true'
      AIRFLOW__WEBSERVER__BASE_URL: 'http://localhost:8082'
      AIRFLOW__WEBSERVER__ENABLE_PROXY_FIX: 'true'
      AIRFLOW__LOGGING__BASE_LOG_FOLDER: '/opt/airflow/logs'
      AIRFLOW__LOGGING__DAG_PROCESSOR_MANAGER_LOG_LOCATION: '/opt/airflow/logs/dag_processor_manager/dag_processor_manager.log'
      AIRFLOW__SCHEDULER__CHILD_PROCESS_LOG_DIRECTORY: '/opt/airflow/logs/scheduler'
      AIRFLOW__LOGGING__LOG_FETCH_TIMEOUT_SEC: '5'
      # SonarQube configuration
      AIRFLOW_VAR_SONARQUBE_BASE_URL: 'http://sonarqube:9000'
      AIRFLOW_VAR_SONARQUBE_TOKEN: 'squ_34a1a84bd11058208c852fc67f06416919f24d74'
      # Connection to metrics database
      AIRFLOW_CONN_SONARQUBE_METRICS_DB: 'postgresql://postgres:postgres@postgres:5432/sonarqube_metrics'
    volumes:
      - ./sonarqube-etl/airflow/dags:/opt/airflow/dags
      - ./sonarqube-etl/airflow/logs:/opt/airflow/logs
      - ./sonarqube-etl/airflow/plugins:/opt/airflow/plugins
      - ./sonarqube-etl/airflow/reports:/opt/airflow/reports
    ports:
      - "8082:8080"
    command: webserver
    networks:
      - app_net
    restart: unless-stopped

  # Airflow scheduler
  airflow-scheduler:
    build: ./sonarqube-etl
    container_name: airflow-scheduler
    hostname: airflow-scheduler
    depends_on:
      - postgres-airflow
      - redis
      - airflow-webserver
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres-airflow:5432/airflow
      AIRFLOW__CORE__FERNET_KEY: ''
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__WEBSERVER__BASE_URL: 'http://localhost:8082'
      AIRFLOW__LOGGING__BASE_LOG_FOLDER: '/opt/airflow/logs'
      AIRFLOW__LOGGING__DAG_PROCESSOR_MANAGER_LOG_LOCATION: '/opt/airflow/logs/dag_processor_manager/dag_processor_manager.log'
      AIRFLOW__SCHEDULER__CHILD_PROCESS_LOG_DIRECTORY: '/opt/airflow/logs/scheduler'
      AIRFLOW__LOGGING__LOG_FETCH_TIMEOUT_SEC: '5'
      # SonarQube configuration
      AIRFLOW_VAR_SONARQUBE_BASE_URL: 'http://sonarqube:9000'
      AIRFLOW_VAR_SONARQUBE_TOKEN: 'squ_34a1a84bd11058208c852fc67f06416919f24d74'
      # Connection to metrics database
      AIRFLOW_CONN_SONARQUBE_METRICS_DB: 'postgresql://postgres:postgres@postgres:5432/sonarqube_metrics'
    volumes:
      - ./sonarqube-etl/airflow/dags:/opt/airflow/dags
      - ./sonarqube-etl/airflow/logs:/opt/airflow/logs
      - ./sonarqube-etl/airflow/plugins:/opt/airflow/plugins
      - ./sonarqube-etl/airflow/reports:/opt/airflow/reports
    command: scheduler
    networks:
      - app_net
    restart: unless-stopped

  # Airflow init (for database initialization)
  airflow-init:
    build: ./sonarqube-etl
    container_name: airflow-init
    depends_on:
      - postgres-airflow
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres-airflow:5432/airflow
      AIRFLOW__CORE__FERNET_KEY: ''
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: 'admin'
      _AIRFLOW_WWW_USER_PASSWORD: 'admin'
      _AIRFLOW_WWW_USER_FIRSTNAME: 'Admin'
      _AIRFLOW_WWW_USER_LASTNAME: 'User'
      _AIRFLOW_WWW_USER_EMAIL: 'admin@example.com'
    command: version
    networks:
      - app_net

  # Streamlit dashboard
  streamlit-dashboard:
    build: ./sonarqube-dashboard
    container_name: streamlit-dashboard
    depends_on:
      - postgres
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: sonarqube_metrics
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "8501:8501"
    networks:
      - app_net
    restart: unless-stopped

  # PgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
      - postgres-airflow
    networks:
      - app_net
    restart: unless-stopped

networks:
  app_net:
    driver: bridge

volumes:
  gitea_data:
  jenkins_data:
  sonarqube_data:
  sonarqube_extensions:
  sonarqube_logs:
  postgres_data:
  postgres_airflow_data:
  pgadmin_data: